Index: opensync-2.0.5.0/interfaces/opensync.ovsschema
===================================================================
--- opensync-2.0.5.0.orig/interfaces/opensync.ovsschema
+++ opensync-2.0.5.0/interfaces/opensync.ovsschema
@@ -4567,7 +4567,8 @@
                   "device",
                   "rssi",
                   "steering",
-                  "network_probe"
+                  "network_probe",
+                  "event"
                 ]
               ]
             }
Index: opensync-2.0.5.0/interfaces/opensync_stats.proto
===================================================================
--- opensync-2.0.5.0.orig/interfaces/opensync_stats.proto
+++ opensync-2.0.5.0/interfaces/opensync_stats.proto
@@ -91,7 +91,7 @@ enum BSEventType {
     CLIENT_GHOST_DEVICE_KICK                = 26;
 }
 
-enum ConnectionEventType {
+enum EventType {
     CLIENT_ASSOC                            = 0;
     CLIENT_AUTH                             = 1;
     CLIENT_DISCONNECT                       = 2;
@@ -102,6 +102,11 @@ enum ConnectionEventType {
     CLIENT_TIMEOUT                          = 7;
 }
 
+enum DeviceType {
+    DEV_AP				    = 0;
+    DEV_STA				    = 1;
+}
+
 enum DisconnectSrc {
     LOCAL                                   = 0;
     REMOTE                                  = 1;
@@ -133,6 +138,10 @@ enum FsType {
     FS_TYPE_TMPFS                           = 1;
 }
 
+enum CTReasonType {
+    CTR_IDLE_TOO_LONG			   = 0;
+    CTR_PROBE_FAIL			   = 1;
+}
 
 message AvgType {
     required uint32     avg                 = 1;
@@ -235,23 +244,6 @@ message Client {
         repeated Sojourn    sojourn         = 4;
         optional uint32     offset_ms       = 5;
    }
-   // type of ConnectionEvent is determined by ConnectionEventType enum
-   // all other fields are optional
-   // there will be more fields in the future, this is only for STA_Client_Assoc event
-   message ConnectionEvent {
-        required ConnectionEventType type   = 1;
-        optional string sta_mac             = 2;
-        optional uint64 session_id          = 3;
-        optional string ssid                = 4;
-        optional RadioBandType band         = 5;
-        optional AssocType assoc_type       = 6;
-        optional uint32 status              = 7;
-        optional int32 rssi                 = 8;
-        optional uint32 internal_sc         = 9;
-        optional bool using11k              = 10;
-        optional bool using11r              = 11;
-        optional bool using11v              = 12;
-   }
     required string     mac_address         = 1;
     optional string     ssid                = 2;
     optional bool       connected           = 3;
@@ -567,6 +559,106 @@ message NetworkProbe {
     optional RADIUSMetrics  radius_probe = 3;
     optional uint64         timestamp_ms = 4;
 }
+
+// type of ConnectionEvent is determined by ConnectionEventType enum
+// all other fields are optional
+// there will be more fields in the future, this is only for STA_Client_Assoc event
+
+
+////////////////////////////////////////////////////////////////////////////////
+//
+// Generic Event report
+//
+// - Contains STA events and will likel be extended with other event types
+//   in the future
+//
+////////////////////////////////////////////////////////////////////////////////
+message EventReport {
+    required EventType event_type              = 1;
+
+    // Client Association Event
+    message ClientAssocEvent {
+        optional string sta_mac                = 1;
+        optional uint64 session_id             = 2;
+        optional string ssid                   = 3;
+        optional RadioBandType band            = 4;
+        optional AssocType assoc_type          = 5;
+        optional uint32 status                 = 6;
+        optional int32 rssi                    = 7;
+        optional uint32 internal_sc            = 8;
+        optional bool using11k                 = 9;
+        optional bool using11r                 = 10;
+        optional bool using11v                 = 11;
+    }
+
+    // Client Authentication Event
+    message ClientAuthEvent {
+        optional bytes staMac                  = 1;
+        optional uint64 sessionId              = 2;
+        optional string ssid                   = 3;
+        optional RadioBandType band            = 4;
+        optional uint32 authStatus             = 5;
+    }
+
+    // Client Disconnect Event
+    message ClientDisconnectEvent {
+        optional bytes staMac                  = 1;
+        optional uint64 sessionId              = 2;
+        optional uint32 reason                 = 3;
+        optional DeviceType dev_type           = 4;
+        optional frameType frType              = 5;
+        optional uint64 lastSentUpTsInUs       = 6;
+        optional uint64 lastRcvUpTsInUs        = 7;
+        optional uint32 internalRC             = 8;
+        optional int32 rssi                    = 9;
+        optional string ssid                   = 10;
+        optional RadioBandType band            = 11;
+    }
+
+    // Client Failure Event
+    message ClientFailureEvent {
+        optional bytes staMac                  = 1;
+        optional uint64 sessionId              = 2;
+        optional string ssid                   = 3;
+        optional int32  reasonCode             = 4;
+        optional string reasonStr              = 5;
+    }
+
+
+    // Client First Data Event
+    message ClientFirstDataEvent {
+        optional bytes staMac                  = 1;
+        optional uint64 sessionId              = 2;
+        optional uint64 firstDataTxedUpTsInUs  = 3;
+        optional uint64 firstDataRxedUpTsInUs  = 4;
+    }
+
+
+    // Client Id Event
+    message ClientIdEvent {
+        optional bytes cltMac                  = 1;
+        optional uint64 sessionId              = 2;
+        optional string cltId                  = 3;
+    }
+
+    // Client IP Event
+    message ClientIpEvent {
+        optional bytes staMac                  = 1;
+        optional uint64 sessionId              = 2;
+        optional bytes ipAddr                  = 3;
+    }
+
+    // Client Timeout Event
+    message ClientTimeoutEvent {
+        optional CTReasonType timeoutReason    = 1
+        optional bytes staMac                  = 2;
+        optional uint64 sessionId              = 3;
+        optional timeoutReason rCode           = 4;
+        optional uint64 lastSentUpTsInUs       = 5;
+        optional uint64 lastRcvUpTsInUs        = 6;
+    }
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 //
 // Overall report that might contain all individual stats reports
@@ -582,4 +674,5 @@ message Report {
     repeated BSReport       bs_report       = 7;
     repeated RssiReport     rssi_report     = 8;
     repeated NetworkProbe   network_probe   = 101;
+    repeated EventReport    event_report    = 102;
 }
